{"version":3,"sources":["components/TodoItems/todoitem.js","components/AddItem/additem.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","props","items","deleteItem","ListItems","length","map","item","key","id","className","name","age","onClick","Additem","handleChange","e","setState","target","value","handleSubmit","preventDefault","addItem","state","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAiCeA,G,MA/BG,SAACC,GAAW,IAEpBC,EAAoBD,EAApBC,MAAQC,EAAYF,EAAZE,WAETC,EADOF,EAAMG,OAElBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,IAAKD,EAAKE,IACX,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAA7D,YAKT,uDAGC,OACI,yBAAKC,UAAU,aACf,6BACG,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEFN,K,OCaEU,G,kBArCZ,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KAMVc,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOT,GAAIO,EAAEE,OAAOC,SATb,EAYlBC,aAAc,SAACJ,GAEZ,GADCA,EAAEK,iBACwB,KAAxBL,EAAEE,OAAOP,KAAKQ,MACb,OAAO,EAET,EAAKlB,MAAMqB,QAAQ,EAAKC,OACxB,EAAKN,SAAS,CACVN,KAAK,GACLC,IAAI,MAlBT,EAAKW,MAAM,CACVZ,KAAK,GACLC,IAAI,IAJS,E,sEAyBb,OACI,6BACG,0BAAMY,SAAUC,KAAKL,cACjB,2BAAOM,KAAK,OAAOC,YAAY,gBAAgBlB,GAAG,OAAOmB,SAAUH,KAAKV,aAAcI,MAAOM,KAAKF,MAAMZ,OACxG,2BAAOe,KAAK,SAASC,YAAY,eAAelB,GAAG,MAAMmB,SAAUH,KAAKV,aAAcI,MAAOM,KAAKF,MAAMX,MACxG,2BAAOc,KAAK,SAASP,MAAM,c,GA/BxBU,cCsCPC,G,kBAnCb,WAAY7B,GAAO,IAAD,8BAChB,4CAAMA,KAURE,WAAW,SAACM,GACV,IAAIP,EAAM,EAAKqB,MAAMrB,MAAM6B,QAAO,SAAAxB,GAChC,OAAOA,EAAKE,KAAOA,KAEpB,EAAKQ,SAAS,CAACf,WAfA,EAiBlBoB,QAAQ,SAACf,GACTA,EAAKE,GAAGuB,KAAKC,SACZ,IAAI/B,EAAM,EAAKqB,MAAMrB,MACrBA,EAAMgC,KAAK3B,GACX,EAAKU,SAAS,CAACf,MAAMA,KAnBpB,EAAKqB,MAAM,CACTrB,MAAQ,CACN,CAACO,GAAG,EAAEE,KAAK,OAAOC,IAAI,IACtB,CAACH,GAAG,EAAEE,KAAK,SAASC,IAAI,IACxB,CAACH,GAAG,EAAEE,KAAK,QAAQC,IAAI,MANX,E,sEAwBhB,OACA,yBAAKF,UAAU,iBACb,wBAAIA,UAAU,eAAd,aACA,kBAAC,EAAD,CAAWR,MAAOuB,KAAKF,MAAMrB,MAAOC,WAAYsB,KAAKtB,aACrD,kBAAC,EAAD,CAAUmB,QAASG,KAAKH,e,GA7BZO,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.934b3cfa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './todoitems.css'\r\nconst Todoitems = (props) => {\r\n\r\n   const {items , deleteItem}=props;\r\n   let length = items.length;\r\n   const ListItems= length ? (\r\n    items.map(item => {\r\n        return(\r\n            <div key={item.id}>\r\n                <span className=\"name\">{item.name}</span>\r\n                <span className=\"age\">{item.age}</span>\r\n                <span className=\"action icon\" onClick={() => deleteItem(item.id)}>&times;</span>\r\n            </div>\r\n        )\r\n    })\r\n   ): (\r\n       <p>There is no item to show</p>\r\n   )\r\n    \r\n        return ( \r\n            <div className=\"Listitems\">\r\n            <div>\r\n               <span className=\"name title\">Name</span> \r\n               <span className=\"age title\">Age</span>\r\n               <span className=\"action title\">Action</span>\r\n            </div>\r\n            {ListItems}\r\n            </div>\r\n         );\r\n\r\n}\r\n \r\nexport default Todoitems;","import React, { Component } from 'react';\r\nimport './additem.css'\r\nclass Additem extends Component {\r\n   constructor(props){\r\n       super(props)\r\n       this.state={\r\n        name:'',\r\n        age:''\r\n       }\r\n   }\r\n   handleChange = (e) =>{\r\n       this.setState({\r\n           [e.target.id]:e.target.value\r\n       })\r\n   }\r\n   handleSubmit= (e) =>{\r\n       e.preventDefault();\r\n      if(e.target.name.value === ''){\r\n          return false;\r\n      }else{\r\n        this.props.addItem(this.state)\r\n        this.setState({\r\n            name:'',\r\n            age:''\r\n        })\r\n      }\r\n   }\r\n    render() { \r\n        return ( \r\n            <div>\r\n               <form onSubmit={this.handleSubmit}>\r\n                   <input type=\"text\" placeholder=\"Enter name...\" id=\"name\" onChange={this.handleChange} value={this.state.name} />\r\n                   <input type=\"number\" placeholder=\"Enter age...\" id=\"age\" onChange={this.handleChange} value={this.state.age} />\r\n                   <input type=\"submit\" value=\"Add\"/>\r\n               </form>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Additem;","import React, { Component } from 'react';\nimport Todoitems from './components/TodoItems/todoitem.js';\nimport Additem from './components/AddItem/additem.js';\nimport './App.css'\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      items : [\n        {id:1,name:'Taha',age:27},\n        {id:2,name:'Chokri',age:26},\n        {id:3,name:'Hamdi',age:34}\n      ]\n\n    }\n  }\n  deleteItem=(id)=>{\n    let items=this.state.items.filter(item => {\n      return item.id !== id\n    })\n     this.setState({items})\n  }\n  addItem=(item)=>{\n  item.id=Math.random();\n   let items=this.state.items;\n   items.push(item);\n   this.setState({items:items})\n  }\n  render() { \n    return ( \n    <div className=\"App container\">\n      <h1 className=\"text-center\">Todo List</h1>\n      <Todoitems items={this.state.items} deleteItem={this.deleteItem}/>\n      <Additem  addItem={this.addItem}/>\n    </div>\n    \n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}